import PDFKit from "pdfkit";
import path from "node:path";
import { createWriteStream } from "node:fs";
import crypto from "node:crypto";
import type { PDFBuildOptions } from "../../types/PDFBuildOptions.js";
import { Theme, Format } from "../../types/enums.js";

export class PDFDocumentGenerator {
  private readonly options: PDFBuildOptions;

  constructor(options: PDFBuildOptions) {
    this.options = options;
  }

  generate(outputPath: string = "output.pdf"): PDFKit.PDFDocument {
    const doc = new PDFKit({
      size: this.options.format === Format.A4 ? "A4" : "LETTER",
      margin: 50,
    });

    doc.pipe(createWriteStream(outputPath || "output.pdf"));

    const fontSize = 12;
    const lineHeight = 20;
    let cursorY = 50;
    const startX = 100;

    if (this.options.theme === Theme.DARK) {
      doc.rect(0, 0, doc.page.width, doc.page.height).fill("#1e1e1e");

      doc.fillColor("white");
    } else {
      doc.rect(0, 0, doc.page.width, doc.page.height).fill("#ffffff");

      doc.fillColor("black");
    }

    doc.fontSize(fontSize);

    if (this.options.includeLogo) {
      const logoWidth = 100;
      const marginRight = 50;
      const posX = doc.page.width - logoWidth - marginRight;
      const posY = 50;
      const logoPath = path.join(process.cwd(), "logo.jpg");
      doc.image(logoPath, posX, posY, { width: logoWidth });
      cursorY += 90;
    }

    if (this.options.title) {
      doc.fontSize(20).text(this.options.title, startX, cursorY);
      cursorY += lineHeight * 2;
      doc.fontSize(fontSize);
    }

    if (this.options.includePaymentDetails) {
      doc.text("Payment Details:", startX, cursorY);
      cursorY += lineHeight;
      doc.text("Amount: $100", startX, cursorY);
      cursorY += lineHeight;
      doc.text(`Date: ${new Date().toLocaleString()}`, startX, cursorY);
      cursorY += lineHeight;
      doc.text(`Transaction ID: ${crypto.randomUUID()}`, startX, cursorY);
      cursorY += lineHeight * 2;
    }

    if (this.options.includeUserInfo) {
      doc.text("User Info:", startX, cursorY);
      cursorY += lineHeight;
      doc.text("Name: John Doe", startX, cursorY);
      cursorY += lineHeight;
      doc.text("Email: johndoe@gmail.com", startX, cursorY);
      cursorY += lineHeight;
      doc.text("Address: house 1", startX, cursorY);
      cursorY += lineHeight;
      doc.text("Phone: +1 232321213", startX, cursorY);
      cursorY += lineHeight;
      doc.text("Date of Birth: 17/04/1999", startX, cursorY);
      cursorY += lineHeight * 2;
    }

    if (this.options.includeTimestamp) {
      const timestamp = new Date().toLocaleString();
      doc.text(`Generated on: ${timestamp}`, startX, cursorY);
      cursorY += lineHeight * 2;
    }

    if (this.options.footerMessage) {
      const footerLines = [
        this.options.footerMessage,
        "Generated by PDFBuilder",
        "Contact: pdf@pdf.co",
        "Website: pdf.co",
        "Address: 123 PDF St, PDF City, PDF Country",
        "Page 1",
      ];

      const footerLineHeight = 20;
      const totalFooterHeight = footerLines.length * footerLineHeight;
      const bottomMargin = 50;
      const footerY = doc.page.height - totalFooterHeight - bottomMargin;

      if (cursorY > footerY - 20) {
        doc.addPage();
        cursorY = 50; // reiniciar cursor en nueva p√°gina
      }

      let currentFooterY = footerY;
      for (const line of footerLines) {
        doc.text(line, startX, currentFooterY);
        currentFooterY += footerLineHeight;
      }
    }

    doc.end();
    return doc;
  }
}